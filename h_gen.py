#!/usr/bin/env python
# -*- coding: utf-8 -*-
# filename          : h_gen.py
# description  : Generates a header like this one
# author            : dad2jrn
# email             :
# date              : 20170422
# version           : 0.12
# usage             : python h_gen.py
# notes             : This header was generated by this script
# license           : MIT
# py version        : 2.7.13
#==============================================================================

"""Header Generator Script.

This script generates a standard header based on the user's choices and inputs.  It will generate
a header for python and shell scripts.

Example:
                To use this script, one only needs to run itin the command line like so::

                                $ python example_google.py
"""
# Import the modules needed to run this script.
from os.path import exists
from time import strftime
import os
import sys
import re

# Gets current version of Python running this script
version = sys.version
for i in version:
    v = re.search(r'(\d+\.\d+\.\d+)', version)
    # global py_ver
    py_ver = v.group(1)

# Menu to choose header type
def main():
    """main menu
    """
    os.system("cls") if os.name == "nt" else os.system("clear")
    global my_header
    menu = {}
    menu['1'] = "Python Header"
    menu['2'] = "Bash Header"
    menu['3'] = "ZSH Header"
    menu['4'] = "Exit"
    while True:
        options = menu.keys()
        for j in options:
            print(j, menu[j])
        selection = input('Please Select Header Type: ')
        if selection == '1':
            my_header = "python"
            gen_title()
        elif selection == '2':
            my_header = "bash"
            gen_title()
        elif selection == '3':
            my_header = "zsh"
            gen_title()
        elif selection == '4':
            sys.exit('Exiting')
        else:
            print("Unknown Option Selected!")
            main()

def gen_title():
    """Generates the  title
    """
    global title
    os.system("cls") if os.name == "nt" else os.system("clear")
    # Get the title of the script which is used to generate the filename
    title = input("Enter a  title for your script: ")
    # Add .py to the end of the filename.
    if my_header == "python":
        title = title + ".py"
    else:
    # Add .sh to the end of the filename
        title = title + ".sh"
    # Convert all letters to lower case.
    title = title.lower()
    # Remove spaces from the title.
    title = title.replace(' ', '_')
    # Check to see if the filename exists to not overwrite it.
    if exists(title):
        print("\nA script with this  name already exists.")
        exit(1)
    select_license()

def select_license():
    """Choose the license type
    """
    os.system("cls") if os.name == "nt" else os.system("clear")
    global my_license
    menu = {}
    menu['1'] = "Apache-2.0"
    menu['2'] = "BSD 3-Clause \"New\" or \"Revised\" license"
    menu['3'] = "BSD 2-Clause \"Simplified\" or \"FreeBSD\" license"
    menu['4'] = "MIT license"
    menu['5'] = "GNU General Public License (GPL)"
    menu['6'] = "GNU Lesser General Public License (LGPL)"
    menu['7'] = "Mozilla Public License 2.0"
    menu['8'] = "Common Development and Distribution License"
    menu['9'] = "None"
    while True:
        options = menu.keys()
        for l in options:
            print(l, menu[l])
        print("\nFor more info, visit: https://opensource.org/licenses")
        selection = input('Please Select The License: ')
        if selection == '1':
            my_license = "Apache-2.0"
            user_input()
        elif selection == '2':
            my_license = "BSD-3-Clause"
            user_input()
        elif selection == '3':
            my_license = "BSD-2-Clause"
            user_input()
        elif selection == '4':
            my_license = "MIT"
            user_input()
        elif selection == '5':
            my_license = "GPL-3.0 or any later version"
            user_input()
        elif selection == '6':
            my_license = "LGPL-3.0"
            user_input()
        elif selection == '7':
            my_license = "MPL-2.0"
            user_input()
        elif selection == '8':
            my_license = "CDDL-1.0"
            user_input()
        elif selection == '9':
            my_license = "No License"
            user_input()
        else:
            print("Unknown Option Selected!")
            select_license()

def user_input():
    """Get basic user info for header
    """
    os.system("cls") if os.name == "nt" else os.system("clear")
    global descrpt
    global name
    global email
    global ver
    global div
    # Get some input from the user
    descrpt = input("Enter a description of your script: ")
    name = input("Enter your name: ")
    email = input("Enter your email: ")
    ver = input("Enter the version number (ex. 0.0.1): ")
    div = "======================================="
    gen_header()

def gen_header():
    """Generates the header
    """
    # Create a file that can be written to.
    filename = open( title, 'w')

    # Set the date automatically.
    date = strftime("%Y/%m/%d")

    # Write the data to the file.
    if my_header == "python":
        filename.write('#!/usr/bin/env python')
        filename.write('\n# -*- coding: utf-8 -*-')
    elif my_header == "bash":
        filename.write('#!/usr/bin/env bash')
    else:
        filename.write('#!/usr/bin/env zsh')

    # Continue with the rest of the header
    filename.write('\n#filename            : ' + title)
    filename.write('\n#description    : ' + descrpt)
    filename.write('\n#author              : ' + name)
    filename.write('\n#email               : ' + email)
    filename.write('\n#date                : ' + date)
    filename.write('\n#version             : ' + ver)
    if my_header == 'python':
        filename.write('\n#usage               : ' + '$ python ' + title)
    else:
        filename.write('\n#usage               : ' + '$ ./' + title)
    filename.write('\n#notes               : ')
    filename.write('\n#license             : ' + my_license)
    if my_header == 'python':
        filename.write('\n#python_version      : ' + py_ver)
    filename.write('\n#' + div * 2 + '\n')
    filename.write('\n')
    if my_header == 'python':
        filename.write('\n\"\"\"Example Google style docstrings.')
        filename.write('\n')
        filename.write('\nThis module demonstrates documentation as specified by the \"Google Python')
        filename.write('\nStyle Guide\"_. Docstrings may extend over multiple lines. Sections are created')
        filename.write('\nwith a section header and a colon followed by a block of indented text.')
        filename.write('\n')
        filename.write('\nExample:')
        filename.write('\n\t\tExamples can be given using either the ``Example`` or ``Examples``')
        filename.write('\n\t\tsections. Sections support any reStructuredText formatting, including')
        filename.write('\n\t\tliteral blocks::')
        filename.write('\n')
        filename.write('\n\t\t\t\t$ python example_google.py')
        filename.write('\n')
        filename.write('\nSection breaks are created by resuming unindented text. Section breaks')
        filename.write('\nare also implicitly created anytime a new section starts.')
        filename.write('\n')
        filename.write('\nTodo:')
        filename.write('\n\t\t* For module TODOs')
        filename.write('\n\t\t* You have to also use ``sphinx.ext.todo`` extension')
        filename.write('\n')
        filename.write('\n.. _Google Python Style Guide:')
        filename.write('\nhttp://google.github.io/styleguide/pyguide.html')
        filename.write('\n\"\"\"')
    filename.write('\n')
    filename.write('\n')

    # Close the file after writing to it.
    filename.close()

    # Clear the screen. This line of code will not work on Windows.
    os.system("cls") if os.name == "nt" else os.system("clear")
    select_editor() if os.name != "nt" else sys.exit("Exiting")

def select_editor():
    """Selects the editor
    """
    # select the editor to to allow user to copy header or start writing their code
    menu = {}
    menu['1'] = "VIM"
    menu['2'] = "Nano"
    menu['3'] = "eMacs"
    menu['4'] = "Atom"
    menu['5'] = "Exit"
    while True:
        options = menu.keys()
        options.sort()
        for i in options:
            print(i, menu[i])
        selection = input("Please Choose Your Editor:")
        if selection == '1':
            os.system("vim +12 " + title)
            exit()
        elif selection == '2':
            os.system("nano +12 " + title)
            exit()
        elif selection == '3':
            os.system("emacs +12 " + title)
            exit()
        elif selection == '4':
            os.system("atom +12 " + title)
            exit()
        elif selection == '5':
            sys.exit("Exiting")
        else:
            print("Invalid Option Selected!")
if __name__ == "__main__":
    main()